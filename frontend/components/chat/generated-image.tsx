'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Download, ExternalLink } from 'lucide-react'
import { cn } from '@/lib/utils'

interface GeneratedImageProps {
  image: {
    id: string
    image_url: string
    prompt: string
    size: string
    quality?: string
    model?: string
  }
  index: number
}

export function GeneratedImage({ image, index }: GeneratedImageProps) {
  const [isLoading, setIsLoading] = useState(true)
  const [downloadError, setDownloadError] = useState<string | null>(null)

  const handleDownload = async () => {
    try {
      setDownloadError(null)
      const response = await fetch(image.image_url)
      const blob = await response.blob()
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `generated-image-${image.id}.png`
      document.body.appendChild(a)
      a.click()
      window.URL.revokeObjectURL(url)
      document.body.removeChild(a)
    } catch (error) {
      console.error('Download failed:', error)
      setDownloadError('Download failed. Please try again.')
    }
  }

  return (
    <div 
      className="bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm group"
      data-testid="generated-image"
      data-image-id={image.id}
      data-image-index={index}
    >
      {/* Image */}
      <div className="relative">
        <img
          src={image.image_url}
          alt={image.prompt}
          className={cn(
            "w-full h-auto transition-opacity duration-300",
            isLoading ? "opacity-0" : "opacity-100"
          )}
          onLoad={() => setIsLoading(false)}
          onError={() => setIsLoading(false)}
          data-testid="generated-image-img"
        />
        
        {isLoading && (
          <div 
            className="absolute inset-0 bg-gray-100 animate-pulse rounded-t-lg"
            data-testid="image-loading-placeholder"
            aria-label="Image loading"
          />
        )}
        
        {/* Action buttons overlay */}
        <div 
          className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity"
          data-testid="image-actions"
        >
          <div className="flex gap-1">
            <Button
              size="sm"
              variant="secondary"
              className="h-8 w-8 p-0 bg-white/90 hover:bg-white"
              onClick={handleDownload}
              data-testid="download-image-button"
              aria-label="Download image"
            >
              <Download className="h-3 w-3" />
            </Button>
            <Button
              size="sm"
              variant="secondary"
              className="h-8 w-8 p-0 bg-white/90 hover:bg-white"
              onClick={() => window.open(image.image_url, '_blank')}
              data-testid="open-image-button"
              aria-label="Open image in new tab"
            >
              <ExternalLink className="h-3 w-3" />
            </Button>
          </div>
        </div>
      </div>
      
      {/* Image info */}
      <div className="p-3 space-y-2">
        <p 
          className="text-sm text-gray-700 line-clamp-2"
          data-testid="image-description"
        >
          Here&apos;s the image you requested based on: &quot;{image.prompt}&quot;.
        </p>
        
        {downloadError && (
          <p 
            className="text-xs text-red-600"
            data-testid="download-error"
            role="alert"
          >
            {downloadError}
          </p>
        )}
        
        <div className="flex items-center justify-between">
          <span 
            className="text-xs text-gray-500"
            data-testid="image-attribution"
          >
            Image generated by GPT-image-1
          </span>
          <div 
            className="flex gap-1 text-xs text-gray-500"
            data-testid="image-metadata"
          >
            <span data-testid="image-size">{image.size}</span>
            {image.quality && (
              <>
                <span>â€¢</span>
                <span data-testid="image-quality">{image.quality}</span>
              </>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}
